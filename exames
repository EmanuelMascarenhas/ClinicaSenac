import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.Files;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Vector;

public class exames extends JFrame {

    private int usuarioId;
    private JTextField txtCPFCadastro;
    private File arquivoPDF;
    private JTextField txtCPFConsulta;
    private JTable table;
    private DefaultTableModel modeloTabela;

    public exames(int usuarioId) {
        this.usuarioId = usuarioId;
        setTitle("Sistema de Exames");
        setSize(800, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JTabbedPane tabbedPane = new JTabbedPane();

        // Aba Cadastro
        JPanel painelCadastro = new JPanel();
        painelCadastro.setLayout(null);

        JLabel lblTitulo = new JLabel("Cadastrar Exame");
        lblTitulo.setFont(new Font("Tahoma", Font.BOLD, 22));
        lblTitulo.setBounds(280, 10, 250, 30);
        painelCadastro.add(lblTitulo);

        JLabel lblCPF = new JLabel("CPF:");
        lblCPF.setBounds(30, 60, 100, 20);
        painelCadastro.add(lblCPF);

        txtCPFCadastro = new JTextField();
        txtCPFCadastro.setBounds(130, 60, 300, 25);
        painelCadastro.add(txtCPFCadastro);

        JButton btnEscolherPDF = new JButton("Selecionar PDF");
        btnEscolherPDF.setBounds(30, 251, 200, 25);
        painelCadastro.add(btnEscolherPDF);

        btnEscolherPDF.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                arquivoPDF = fileChooser.getSelectedFile();
            }
        });

        JButton btnSalvar = new JButton("Salvar Exame");
        btnSalvar.setBounds(280, 248, 130, 30);
        painelCadastro.add(btnSalvar);
        btnSalvar.addActionListener(e -> salvarExame());

        // Aba Consulta
        JPanel painelConsulta = new JPanel();
        painelConsulta.setLayout(null);

        JLabel lblTituloConsulta = new JLabel("CONSULTA DE EXAMES");
        lblTituloConsulta.setFont(new Font("Times New Roman", Font.BOLD, 28));
        lblTituloConsulta.setBounds(230, 20, 400, 45);
        painelConsulta.add(lblTituloConsulta);

        JLabel lblCPFConsulta = new JLabel("Digite seu CPF:");
        lblCPFConsulta.setFont(new Font("Tahoma", Font.PLAIN, 16));
        lblCPFConsulta.setBounds(40, 90, 150, 25);
        painelConsulta.add(lblCPFConsulta);

        txtCPFConsulta = new JTextField();
        txtCPFConsulta.setBounds(190, 90, 250, 25);
        painelConsulta.add(txtCPFConsulta);

        JButton btnBuscar = new JButton("Buscar");
        btnBuscar.setBounds(460, 90, 100, 25);
        painelConsulta.add(btnBuscar);

        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setBounds(40, 140, 700, 250);
        painelConsulta.add(scrollPane);

        table = new JTable();
        modeloTabela = new DefaultTableModel(new Object[][] {},
                new String[] { "ID", "Data", "Arquivos" }) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 2)
                    return ImageIcon.class;
                return Object.class;
            }
        };
        table.setModel(modeloTabela);
        scrollPane.setViewportView(table);

        btnBuscar.addActionListener(e -> buscarExames());

        table.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int col = table.getSelectedColumn();
                int row = table.getSelectedRow();
                if (col == 2) {
                    int id = Integer.parseInt(table.getValueAt(row, 0).toString());
                    abrirPdfDoBanco(id);
                }
            }
        });

        tabbedPane.addTab("Cadastrar Exame", painelCadastro);
        tabbedPane.addTab("Consultar Exames", painelConsulta);

        getContentPane().add(tabbedPane);
    }

    private void salvarExame() {
        String cpf = txtCPFCadastro.getText().trim();
        if (cpf.isEmpty() || arquivoPDF == null) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos e selecione o PDF.");
            return;
        }

        try (Connection conn = BancoDeDados.conectar()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados.");
                return;
            }

            // SQL para inserir dados no banco
            String sql = "INSERT INTO exames (usuario_id, cpf, arquivo_pdf) VALUES (?, ?, ?)";

            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, usuarioId);  // ID do usuário
                stmt.setString(2, cpf);      // CPF

                // Lendo o arquivo PDF como um array de bytes
                byte[] fileBytes = Files.readAllBytes(arquivoPDF.toPath());  // Lendo o arquivo diretamente em um array de bytes
                stmt.setBytes(3, fileBytes);  // Enviando o arquivo PDF como byte[]

                // Executa a inserção no banco
                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Exame cadastrado com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao cadastrar exame.");
                }

                // Limpar campos após salvar
                txtCPFCadastro.setText("");
                arquivoPDF = null;

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao salvar exame no banco de dados: " + e.getMessage());
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao ler o arquivo PDF: " + e.getMessage());
        }
    }



    private void buscarExames() {
        String cpf = txtCPFConsulta.getText().trim();
        if (cpf.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira um CPF.");
            return;
        }

        modeloTabela.setRowCount(0); // Limpar a tabela antes de preencher com novos dados

        // Usando o método de conexão da classe BancoDeDados
        try (Connection conn = BancoDeDados.conectar()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Erro de conexão com banco de dados.");
                return;
            }

            String sql = "SELECT id, data_upload FROM exames WHERE cpf = ? AND usuario_id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, cpf); // Definindo o CPF
                stmt.setInt(2, usuarioId);  // Definindo o ID do usuário

                try (ResultSet rs = stmt.executeQuery()) {
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

                    while (rs.next()) {
                        Vector<Object> linha = new Vector<>();
                        linha.add(rs.getInt("id"));

                        Timestamp dataUpload = rs.getTimestamp("data_upload");
                        String dataFormatada = dataUpload != null ? sdf.format(dataUpload) : "";

                        linha.add(dataFormatada);
                        
                        modeloTabela.addRow(linha);  // Adiciona apenas os dados necessários na tabela
                    }

                    if (modeloTabela.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(this, "Nenhum exame encontrado.");
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao consultar exames: " + e.getMessage());
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }
    }


    private void abrirPdfDoBanco(int idExame) {
        try (Connection conn = BancoDeDados.conectar()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Erro de conexão com banco de dados.");
                return;
            }

            String sql = "SELECT arquivo_pdf FROM exames WHERE id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, idExame);
                
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        byte[] pdfBytes = rs.getBytes("arquivo_pdf");

                        // Criar um arquivo temporário
                        File tempFile = File.createTempFile("exame_" + idExame, ".pdf");
                        tempFile.deleteOnExit(); // Garantir que o arquivo temporário será excluído quando o programa terminar

                        // Escrever o conteúdo do PDF no arquivo temporário
                        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                            fos.write(pdfBytes);
                        }

                        // Abrir o arquivo PDF no sistema operacional
                        Desktop.getDesktop().open(tempFile);
                    } else {
                        JOptionPane.showMessageDialog(this, "Exame não encontrado.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao consultar o exame no banco de dados: " + e.getMessage());
                }

            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao salvar ou abrir o arquivo PDF.");
        }
    }


}
